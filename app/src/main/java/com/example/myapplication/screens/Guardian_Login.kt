package com.example.myapplication.screens

import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.myapplication.BuildConfig
import com.example.myapplication.R
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.constraintlayout.compose.Dimension
import okhttp3.*
import org.json.JSONObject
import java.io.IOException

@Composable
fun Guardian_Login(navController: NavController) {
    val auth = Firebase.auth
    val coroutineScope = rememberCoroutineScope()
    val context = LocalContext.current

    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }

    val client = remember { OkHttpClient() }

    ConstraintLayout(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 24.dp)
    ) {
        val (logo, textLogo, title, emailLabel, emailField, passwordLabel, passwordField,
            loginButton, registerButton) = createRefs()

        // Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ
        Image(
            painter = painterResource(id = R.drawable.rogo),
            contentDescription = "Î°úÍ≥†",
            contentScale = ContentScale.Fit,
            modifier = Modifier
                .size(160.dp)
                .constrainAs(logo) {
                    top.linkTo(parent.top, margin = 154.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                }
        )

        // ÌÖçÏä§Ìä∏ Î°úÍ≥†
        Image(
            painter = painterResource(id = R.drawable.ai_text),
            contentDescription = "ÌÖçÏä§Ìä∏ Î°úÍ≥†",
            contentScale = ContentScale.Fit,
            modifier = Modifier
                .size(120.dp)
                .constrainAs(textLogo) {
                    top.linkTo(logo.bottom, margin = -54.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                }
        )

        // ÌÉÄÏù¥ÌãÄ
        Text(
            text = "Î≥¥Ìò∏Ïûê Î°úÍ∑∏Ïù∏",
            fontSize = 28.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.constrainAs(title) {
                top.linkTo(textLogo.bottom, margin = -20.dp)
                start.linkTo(parent.start)
                end.linkTo(parent.end)
            }
        )

        // Ïù¥Î©îÏùº ÎùºÎ≤®
        Text(
            text = "Ïù¥Î©îÏùº Ï£ºÏÜå",
            fontSize = 16.sp,
            modifier = Modifier.constrainAs(emailLabel) {
                top.linkTo(title.bottom, margin = 24.dp)
                start.linkTo(parent.start)
            }
        )

        // Ïù¥Î©îÏùº ÏûÖÎ†•Ï∞Ω
        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            placeholder = { Text("example@mail.com") },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .constrainAs(emailField) {
                    top.linkTo(emailLabel.bottom, margin = 8.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                    width = Dimension.fillToConstraints
                },
            singleLine = true
        )

        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÎùºÎ≤®
        Text(
            text = "ÎπÑÎ∞ÄÎ≤àÌò∏",
            fontSize = 16.sp,
            modifier = Modifier.constrainAs(passwordLabel) {
                top.linkTo(emailField.bottom, margin = 16.dp)
                start.linkTo(parent.start)
            }
        )

        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•Ï∞Ω
        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            placeholder = { Text("‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .constrainAs(passwordField) {
                    top.linkTo(passwordLabel.bottom, margin = 8.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                    width = Dimension.fillToConstraints
                },
            singleLine = true
        )

        // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
        Button(
            onClick = {
                coroutineScope.launch {
                    val emailTrimmed = email.trim()
                    val passwordTrimmed = password.trim()

                    try {
                        auth.signInWithEmailAndPassword(emailTrimmed, passwordTrimmed)
                            .addOnSuccessListener { result ->
                                result.user?.getIdToken(true)?.addOnSuccessListener { tokenResult ->
                                    val idToken = tokenResult.token
                                    val request = Request.Builder()
                                        .url("${BuildConfig.BASE_URL}/auth/me")
                                        .addHeader("Authorization", "Bearer $idToken")
                                        .get()
                                        .build()

                                    client.newCall(request).enqueue(object : Callback {
                                        override fun onFailure(call: Call, e: IOException) {
                                            coroutineScope.launch {
                                                withContext(Dispatchers.Main) {
                                                    Toast.makeText(context, "ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                                                }
                                            }
                                        }

                                        override fun onResponse(call: Call, response: Response) {
                                            coroutineScope.launch {
                                                withContext(Dispatchers.Main) {
                                                    if (response.isSuccessful) {
                                                        val body = response.body?.string()
                                                        val json = JSONObject(body ?: "{}")
                                                        val role = json.optString("role")
                                                        val joinCode = json.optString("joinCode") // üîπ joinCode Ï∂îÏ∂ú

                                                        if (role == "guardian" && joinCode.isNotBlank()) {
                                                            Toast.makeText(context, "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!", Toast.LENGTH_SHORT).show()
                                                            navController.navigate("code/$joinCode") // üîπ ÌôîÎ©¥ Ïù¥Îèô
                                                        } else {
                                                            Toast.makeText(context, "ÏûòÎ™ªÎêú ÏÇ¨Ïö©Ïûê Ïó≠Ìï† ÎòêÎäî joinCode ÏóÜÏùå", Toast.LENGTH_SHORT).show()
                                                        }
                                                    } else {
                                                        Toast.makeText(context, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                                                    }
                                                }
                                            }
                                        }

                                    })
                                }
                            }
                            .addOnFailureListener {
                                Toast.makeText(context, "Î°úÍ∑∏Ïù∏ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                            }
                    } catch (e: Exception) {
                        withContext(Dispatchers.Main) {
                            Toast.makeText(context, "Ïò§Î•ò: ${e.message}", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .constrainAs(loginButton) {
                    top.linkTo(passwordField.bottom, margin = 32.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                },
            shape = RoundedCornerShape(28.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF00C4B4))
        ) {
            Text("Î°úÍ∑∏Ïù∏", color = Color.White, fontSize = 16.sp)
        }

        // ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
        Button(
            onClick = { navController.navigate("guardianSignup") },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .constrainAs(registerButton) {
                    top.linkTo(loginButton.bottom, margin = 16.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                },
            shape = RoundedCornerShape(28.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF00C4B4))
        ) {
            Text("ÌöåÏõêÍ∞ÄÏûÖ", color = Color.White, fontSize = 16.sp)
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewLogin2() {
    Guardian_Login(navController = rememberNavController())
}


